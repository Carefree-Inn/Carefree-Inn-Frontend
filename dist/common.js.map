{"version":3,"file":"common.js","sources":["webpack:///._src_Images_heart.svg","webpack:///._src_Images_like.svg","webpack:///._src_Images_topic.png","webpack:///._src_service_fetch.js"],"sourcesContent":["module.exports = __webpack_public_path__ + \"Images/heart.svg\";","module.exports = __webpack_public_path__ + \"Images/like.svg\";","module.exports = __webpack_public_path__ + \"Images/topic.png\";","import Taro from \"@tarojs/taro\";\r\n\r\nconst preUrl = \"http://139.196.30.123:8080/inn/api/v1\";\r\nconst Fetch = (url, data = {}, method) => {\r\n    const header = {\r\n        \"content-type\": \"application/json\",\r\n        Authorization: Taro.getStorageSync(\"token\"),\r\n    };\r\n\r\n    return Taro.request({\r\n        url: url,\r\n        data,\r\n        method,\r\n        header,\r\n    })\r\n        .then((res) => {\r\n            switch (res.statusCode) {\r\n                case 200: {\r\n                    if (res.data) {\r\n                        return res.data;\r\n                    } else {\r\n                        return res.errMsg;\r\n                    }\r\n                }\r\n                case 400:\r\n                    throw new Error(\"没有权限访问\");\r\n                case 401:\r\n                    return res.data;\r\n                case 404:\r\n                    throw new Error(\"not found\");\r\n                case 500:\r\n                    throw new Error(\"服务器错误\");\r\n                default:\r\n                    throw new Error(res.errMsg);\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n        });\r\n};\r\n\r\nexport async function postData(url = \"\", data = {}) {\r\n    return await Fetch(preUrl + url, JSON.stringify(data), \"POST\");\r\n}\r\n\r\nexport async function getJson(url = \"\", data = {}) {\r\n    return await Fetch(preUrl + url, JSON.stringify(data), \"GET\");\r\n}\r\n\r\nexport async function putData(url = \"\", data = {}) {\r\n    return await Fetch(preUrl + url, JSON.stringify(data), \"PUT\");\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;A","sourceRoot":""}